import {
  logSWViteBuild,
  logWorkboxResult,
  normalizePath
} from "./chunk-AP4RGC7F.js";
import "./chunk-OKR3ZY3D.js";
import {
  require_node_fs
} from "./chunk-QOJIOVYW.js";
import {
  require_node_path
} from "./chunk-Z3SAOHNY.js";
import {
  __toESM
} from "./chunk-HMQSRIS3.js";

// node_modules/vite-plugin-pwa/dist/vite-build-BGK4YAIU.js
var import_node_fs = __toESM(require_node_fs(), 1);
var import_node_path = __toESM(require_node_path(), 1);
async function buildSW(version, options, viteOptions, workboxPromise) {
  var _a, _b, _c, _d;
  await ((_b = (_a = options.integration) == null ? void 0 : _a.beforeBuildServiceWorker) == null ? void 0 : _b.call(_a, options));
  const { build } = await import("./vite.js");
  const {
    inlineConfig,
    format,
    swName,
    swMjsName
  } = prepareViteBuild(options, viteOptions);
  logSWViteBuild(version, normalizePath((0, import_node_path.relative)(viteOptions.root, options.swSrc)), viteOptions, format);
  await ((_d = (_c = options.integration) == null ? void 0 : _c.configureCustomSWViteBuild) == null ? void 0 : _d.call(_c, inlineConfig));
  await build(inlineConfig);
  if (format !== "iife") {
    const swDestDir = (0, import_node_path.dirname)(options.swDest);
    const mjsPath = (0, import_node_path.resolve)(swDestDir, swMjsName);
    const jsPath = (0, import_node_path.resolve)(swDestDir, swName);
    await import_node_fs.promises.rename(mjsPath, jsPath);
    const mjsMapPath = `${mjsPath}.map`;
    const sourceMap = await import_node_fs.promises.lstat(mjsMapPath).then((s) => s.isFile()).catch(() => false);
    if (sourceMap) {
      await Promise.all([
        import_node_fs.promises.readFile(jsPath, "utf-8").then((content) => import_node_fs.promises.writeFile(
          jsPath,
          content.replace(`${swMjsName}.map`, `${swName}.map`),
          "utf-8"
        )),
        import_node_fs.promises.rename(mjsMapPath, `${jsPath}.map`)
      ]);
    }
  }
  if (!options.injectManifest.injectionPoint)
    return;
  const injectManifestOptions = {
    ...options.injectManifest,
    // this will not fail since there is an injectionPoint
    swSrc: options.injectManifest.swDest
  };
  const { injectManifest } = await workboxPromise;
  const buildResult = await injectManifest(injectManifestOptions);
  logWorkboxResult(
    version,
    options.throwMaximumFileSizeToCacheInBytes,
    "injectManifest",
    buildResult,
    viteOptions,
    format
  );
}
function prepareViteBuild(options, viteOptions) {
  const define = { ...viteOptions.define ?? {} };
  const nodeEnv = options.injectManifestBuildOptions.enableWorkboxModulesLogs ? "development" : "development";
  define["process.env.NODE_ENV"] = JSON.stringify(nodeEnv);
  const buildPlugins = options.buildPlugins;
  const {
    format,
    plugins,
    rollupOptions
  } = options.injectManifestRollupOptions;
  const inlineConfig = {
    root: viteOptions.root,
    base: viteOptions.base,
    resolve: viteOptions.resolve,
    mode: viteOptions.mode,
    envDir: options.injectManifestEnvOptions.envDir,
    envPrefix: options.injectManifestEnvOptions.envPrefix,
    // don't copy anything from public folder
    publicDir: false,
    build: {
      target: options.injectManifestBuildOptions.target,
      minify: options.injectManifestBuildOptions.minify,
      sourcemap: options.injectManifestBuildOptions.sourcemap,
      outDir: options.outDir,
      emptyOutDir: false
    },
    configFile: false,
    define,
    plugins: buildPlugins == null ? void 0 : buildPlugins.vite
  };
  const swName = (0, import_node_path.basename)(options.swDest);
  const swMjsName = swName.replace(/\.js$/, ".mjs");
  if (format !== "iife") {
    if (viteOptions.build.sourcemap) {
      Object.assign(inlineConfig, {
        ...inlineConfig,
        esbuild: {
          sourcemap: viteOptions.build.sourcemap === "hidden" ? true : viteOptions.build.sourcemap
        }
      });
    }
    Object.assign(inlineConfig.build, {
      ...inlineConfig.build,
      modulePreload: false,
      rollupOptions: {
        ...rollupOptions,
        plugins: (buildPlugins == null ? void 0 : buildPlugins.rollup) ?? plugins,
        input: options.swSrc,
        output: {
          entryFileNames: swMjsName,
          inlineDynamicImports: true
        }
      }
    });
  } else {
    Object.assign(inlineConfig.build, {
      ...inlineConfig.build,
      lib: {
        entry: options.swSrc,
        name: "app",
        formats: [format]
      },
      rollupOptions: {
        ...rollupOptions,
        plugins: (buildPlugins == null ? void 0 : buildPlugins.rollup) ?? plugins,
        output: {
          entryFileNames: swName
        }
      }
    });
  }
  return {
    inlineConfig,
    swName,
    swMjsName,
    format
  };
}
export {
  buildSW
};
//# sourceMappingURL=vite-build-BGK4YAIU-WMWWWJZT.js.map
